<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sqx.modules.course.dao.CourseDao">
    <update id="updateDelete">
        update course
        set is_delete=1
        where course_id = #{id}
    </update>

    <select id="selectCourseByCourseId" resultType="Map">
        SELECT
        c.classify_id as classifyId,
        c.course_id as courseId,
        c.course_label as courseLabel,
        c.create_time createTime,
        c.details,
        c.img,
        c.banner_img as bannerImg,
        c.status,
        c.is_delete as isDelete,
        c.msg_type msgType,
        c.msg_url as msgUrl,
        c.pay_num as payNum,
        c.price,
        c.price_type as priceType,
        c.over,
        c.title,
        c.is_price as isPrice,
        c.title_img as titleImg,
        c.update_time as updateTime,
        cc.classification_name as classificationName,
        c.course_type as courseType,
        c.banner_id as bannerId,
        b.name as bannerName,
        c.view_counts as viewCounts,
        c.dy_img_id as dyImgId,
        c.dy_course_id as dyCourseId,
        c.wx_course_id as wxCourseId,
        c.wx_show as wxShow,
        c.dy_show as dyShow,
        c.sequence as sequence,
        c.is_cut as isCut,
        c.invite_target as inviteTarget,
        c.reward_money as rewardMoney,
        c.cut_time_limit as cutTimeLimit,
        c.former_name as formerName,
        c.producer as producer,
        c.score as score,
        c.is_external as isExternal,
        c.external_url as externalUrl,
        c.area_id as areaId,
        c.platform_id as platformId,
        (select avg(score) from course_score d where d.course_id=c.course_id ) as realScore,
        (select count(*) from course_details d where d.course_id=c.course_id ) as courseDetailsCount,
        /*(select count(*) from course_collect d where d.course_id=c.course_id ) as collectCount,*/
        (select sum(good_num) from course_details d where d.course_id=c.course_id ) as goodNum,
        <if test="userId!=null">
            (
            SELECT
            cc.course_details_id
            FROM
            course_collect cc
            WHERE
            cc.course_id = c.course_id
            AND cc.classify = 3
            and cc.user_id = #{userId}
            ORDER BY
            cc.update_time desc
            LIMIT 1
            ) AS courseDetailsId,
        </if>
        <if test="userId==null">
            null AS courseDetailsName,
            null AS courseDetailsId,
        </if>
        (select count(*) from course_details cd where c.course_id=cd.course_id and cd.good=1 ) as isRecommend
        FROM
        course AS c
        LEFT JOIN course_classification AS cc ON c.classify_id = cc.classification_id
        left join banner as b on b.id=c.banner_id
        WHERE
        1 = 1
        AND c.is_delete = 0
        and c.course_id=#{courseId}
    </select>

    <select id="selectCourse" resultType="Map">
        SELECT
        c.classify_id as classifyId,
        c.course_id as courseId,
        c.course_label as courseLabel,
        c.create_time createTime,
        c.details,
        c.img,
        c.banner_img as bannerImg,
        c.status,
        c.is_delete as isDelete,
        c.msg_type msgType,
        c.msg_url as msgUrl,
        c.pay_num as payNum,
        c.price,
        c.price_type as priceType,
        c.over,
        c.title,
        c.is_price as isPrice,
        c.title_img as titleImg,
        c.update_time as updateTime,
        cc.classification_name as classificationName,
        c.course_type as courseType,
        c.banner_id as bannerId,
        b.name as bannerName,
        c.view_counts as viewCounts,
        c.dy_img_id as dyImgId,
        c.dy_course_id as dyCourseId,
        c.wx_course_id as wxCourseId,
        c.wx_show as wxShow,
        c.dy_show as dyShow,
        c.sequence as sequence,
        c.is_cut as isCut,
        c.invite_target as inviteTarget,
        c.reward_money as rewardMoney,
        c.cut_time_limit as cutTimeLimit,
        c.former_name as formerName,
        c.producer as producer,
        c.score as score,
        c.is_external as isExternal,
        c.external_url as externalUrl,
        c.area_id as areaId,
        c.platform_id as platformId,
        (select avg(score) from course_score d where d.course_id=c.course_id ) as realScore,
        (select count(*) from course_details d where d.course_id=c.course_id ) as courseDetailsCount,
        /*(select count(*) from course_collect d where d.course_id=c.course_id ) as collectCount,*/
        (select sum(good_num) from course_details d where d.course_id=c.course_id ) as goodNum,
        (select count(*) from course_details cd where c.course_id=cd.course_id and cd.good=1 ) as isRecommend
        FROM
        course AS c
        LEFT JOIN course_classification AS cc ON c.classify_id = cc.classification_id
        left join banner as b on b.id=c.banner_id
        WHERE
        1 = 1
        AND c.is_delete = 0
        AND (c.is_external is null or c.is_external = 0)
        <if test='null != wxShow and wxShow==1'>
            and c.wx_show = #{wxShow}
        </if>
        <if test='null != wxShow and wxShow==2'>
            and (c.wx_show = #{wxShow} or c.wx_show is null)
        </if>
        <if test='null != dyShow and dyShow==1'>
            and c.dy_show = #{dyShow}
        </if>
        <if test='null != dyShow and dyShow==2'>
            and (c.dy_show = #{dyShow} or c.dy_show is null)
        </if>
        <if test='null != title'>
            and c.title = #{title}
        </if>
        <if test='null!= classifyId and classifyId!=0'>
            and c.classify_id = #{classifyId}
        </if>
        <if test='null!= bannerId and bannerId!=0'>
            and c.banner_id = #{bannerId}
        </if>
        <if test="classifyId==0">
            and c.is_recommend=1
        </if>
        <if test="over!=null">
            and c.over=#{over}
        </if>
        <if test="isRecommend!=null and isRecommend!=-1">
            and c.course_id in (select course_id from course_details where good=1)
        </if>
        <if test="status!=null and status!=0">
            and c.status=#{status}
        </if>
        <if test="isPrice!=null">
            and c.is_price=#{isPrice}
        </if>
        <if test="wxCourse!=null">
            and c.wx_course_id is not null
        </if>
        <if test="dyCourse!=null">
            and c.dy_status=4
        </if>
        <!--<if test="dyCourse!=null">
            and c.sequence=#{isPrice}
        </if>
        <if test="dyCourse!=null">
            and c.is_cut=#{isPrice}
        </if>
        <if test="dyCourse!=null">
            and c.invite_target=#{isPrice}
        </if>
        <if test="dyCourse!=null">
            and c.reward_money=#{isPrice}
        </if>
        <if test="dyCourse!=null">
            and c.cut_time_limit=#{isPrice}
        </if>-->
        <if test="isCut!=null">
            and c.is_cut=#{isCut}
        </if>
        <if test="sort==null">
            order by c.create_time desc
        </if>
        <if test="sort!=null and sort==1">
            order by goodNum desc
        </if>
        <if test="sort!=null and sort==2">
            and is_recommend=1 order by rand()
        </if>
        <if test="sort!=null and sort==3">
            order by c.sequence asc, goodNum desc
        </if>
    </select>

    <!-- pref: 2024/11/26 发现订单子查询拖慢了10s的速度 可采用左连接或者删除 & 删除无用连接-->
    <!--<select id="selectCourseAdmin" resultType="Map">
        SELECT
        c.classify_id as classifyId,
        c.course_id as courseId,
        c.course_label as courseLabel,
        c.course_label_ids as courseLabelIds,
        c.create_time createTime,
        c.details,
        c.img,
        c.banner_img as bannerImg,
        c.status,
        c.is_delete as isDelete,
        c.msg_type msgType,
        c.msg_url as msgUrl,
        c.pay_num as payNum,
        c.price,
        c.price_type as priceType,
        c.over,
        c.title,
        c.is_price as isPrice,
        c.title_img as titleImg,
        c.update_time as updateTime,
        cc.classification_name as classificationName,
        c.course_type as courseType,
        c.banner_id as bannerId,
        b.name as bannerName,
        c.view_counts as viewCounts,
        c.dy_img_id as dyImgId,
        c.dy_course_id as dyCourseId,
        c.dy_status as dyStatus,
        c.dy_status_content as dyStatusContent,
        c.dy_version as dyVersion,
        c.license_num as licenseNum,
        c.registration_num as registrationNum,
        c.ordinary_record_num as ordinaryRecordNum,
        c.key_record_num as keyRecordNum,
        c.wx_course_id as wxCourseId,
        c.wx_show as wxShow,
        c.dy_show as dyShow,
        c.sequence as sequence,
        c.is_cut as isCut,
        c.invite_target as inviteTarget,
        c.reward_money as rewardMoney,
        c.cut_time_limit as cutTimeLimit,
        c.former_name as formerName,
        c.producer as producer,
        c.score as score,
        c.is_external as isExternal,
        c.external_url as externalUrl,
        c.area_id as areaId,
        c.platform_id as platformId,
        (select avg(score) from course_score d where d.course_id=c.course_id ) as realScore,
        (select count(*) from course_details where dy_url_status in (1,3) or dy_url_status=null) as dyUrlStatus,
        (select sum(o.pay_money) from orders o where o.course_id=c.course_id and o.status=1) as payMoney,
        (select sum(good_num) from course_details d where d.course_id=c.course_id ) as goodNum,
        c.is_recommend as isRecommend
        FROM
        course AS c
        LEFT JOIN course_classification AS cc ON c.classify_id = cc.classification_id
        left join banner as b on b.id=c.banner_id
        WHERE
        1 = 1
        AND c.is_delete = 0
        <if test='null != wxShow and wxShow==1'>
            and c.wx_show = #{wxShow}
        </if>
        <if test='null != wxShow and wxShow==2'>
            and (c.wx_show = #{wxShow} or c.wx_show is null)
        </if>
        <if test='null != dyShow and dyShow==1'>
            and c.dy_show = #{dyShow}
        </if>
        <if test='null != dyShow and dyShow==2'>
            and (c.dy_show = #{dyShow} or c.dy_show is null)
        </if>
        <if test='null != title'>
            and c.title LIKE CONCAT('%', #{title}, '%')
        </if>
        <if test='null!= classifyId and classifyId!=0'>
            and c.classify_id = #{classifyId}
        </if>
        <if test='null!= bannerId and bannerId!=0'>
            and c.banner_id = #{bannerId}
        </if>
        <if test="classifyId==0">
            and c.is_recommend=1
        </if>
        <if test="over!=null and over==1">
            and c.over=1
        </if>
        <if test="over!=null and over==2">
            and c.over is null
        </if>
        <if test="isRecommend!=null and isRecommend!=-1">
            and c.course_id in (select course_id from course_details where good=1)
        </if>
        <if test="status!=null and status!=0">
            and c.status=#{status}
        </if>
        <if test="isPrice!=null">
            and c.is_price=#{isPrice}
        </if>
        <if test="wxCourse!=null">
            and c.wx_course_id is not null
        </if>
        <if test="dyCourse!=null">
            and c.dy_status=4
        </if>
        <if test="isCut!=null">
            and c.is_cut=#{isCut}
        </if>
        <if test="is_external!=null">
            and c.is_external=#{isExternal}
        </if>
        <if test="sort==null">
            order by c.create_time desc
        </if>
        <if test="sort!=null and sort==1">
            order by goodNum desc
        </if>
        <if test="sort!=null and sort==2">
            order by weekGoodNum desc
        </if>
        <if test="sort!=null and sort==3">
            order by c.sequence asc, goodNum desc
        </if>
    </select>-->
    <!-- 后台查询列表接口 -->
    <!-- TODO: 使用左连接优化了查询速度 10s+ > 0.4s & banner&order&dyUrlStatus&goodNum等连接需要结合前端考察业务决定是否删除-->
    <select id="selectCourseAdmin" resultType="Map">
        SELECT
        c.classify_id AS classifyId,
        c.course_id AS courseId,
        c.course_label AS courseLabel,
        c.course_label_ids AS courseLabelIds,
        c.create_time AS createTime,
        c.details,
        c.img,
        c.banner_img AS bannerImg,
        c.status,
        c.is_delete AS isDelete,
        c.msg_type AS msgType,
        c.msg_url AS msgUrl,
        c.pay_num AS payNum,
        c.price,
        c.price_type AS priceType,
        c.over,
        c.title,
        c.is_price AS isPrice,
        c.title_img AS titleImg,
        c.update_time AS updateTime,
        cc.classification_name AS classificationName,
        c.course_type AS courseType,
        c.banner_id AS bannerId,
        b.name AS bannerName,
        c.view_counts AS viewCounts,
        c.dy_img_id AS dyImgId,
        c.dy_course_id AS dyCourseId,
        c.dy_status AS dyStatus,
        c.dy_status_content AS dyStatusContent,
        c.dy_version AS dyVersion,
        c.license_num AS licenseNum,
        c.registration_num AS registrationNum,
        c.ordinary_record_num AS ordinaryRecordNum,
        c.key_record_num AS keyRecordNum,
        c.wx_course_id AS wxCourseId,
        c.wx_show AS wxShow,
        c.dy_show AS dyShow,
        c.sequence AS sequence,
        c.is_cut AS isCut,
        c.invite_target AS inviteTarget,
        c.reward_money AS rewardMoney,
        c.cut_time_limit AS cutTimeLimit,
        c.former_name AS formerName,
        c.producer AS producer,
        c.score AS score,
        c.is_external AS isExternal,
        c.external_url AS externalUrl,
        cs.avg_score AS realScore,
        COALESCE(cd.dyUrlStatus, null) AS dyUrlStatus,
        COALESCE(o.payMoney, null) AS payMoney,
        COALESCE(cd2.goodNum, null) AS goodNum,
        c.is_recommend AS isRecommend
        FROM
        course AS c
        LEFT JOIN course_classification AS cc ON c.classify_id = cc.classification_id
        LEFT JOIN banner AS b ON b.id = c.banner_id
        LEFT JOIN (
        SELECT course_id, AVG(score) AS avg_score
        FROM course_score
        GROUP BY course_id
        ) cs ON c.course_id = cs.course_id
        LEFT JOIN (
        SELECT course_id, COUNT(*) AS dyUrlStatus
        FROM course_details
        WHERE dy_url_status IN (1, 3) OR dy_url_status IS NULL
        GROUP BY course_id
        ) cd ON c.course_id = cd.course_id
        LEFT JOIN (
        SELECT course_id, SUM(pay_money) AS payMoney
        FROM orders
        WHERE status = 1
        GROUP BY course_id
        ) o ON c.course_id = o.course_id
        LEFT JOIN (
        SELECT course_id, SUM(good_num) AS goodNum
        FROM course_details
        GROUP BY course_id
        ) cd2 ON c.course_id = cd2.course_id
        WHERE
        c.is_delete = 0
        <if test='null != wxShow and wxShow==1'>
            and c.wx_show = #{wxShow}
        </if>
        <if test='null != wxShow and wxShow==2'>
            and (c.wx_show = #{wxShow} or c.wx_show is null)
        </if>
        <if test='null != dyShow and dyShow==1'>
            and c.dy_show = #{dyShow}
        </if>
        <if test='null != dyShow and dyShow==2'>
            and (c.dy_show = #{dyShow} or c.dy_show is null)
        </if>
        <if test="null != title and '' !=title ">
            and c.title LIKE CONCAT('%', #{title}, '%')
        </if>
        <if test='null!= classifyId and classifyId!=0'>
            and c.classify_id = #{classifyId}
        </if>
        <if test='null!= bannerId and bannerId!=0'>
            and c.banner_id = #{bannerId}
        </if>
        <if test="classifyId==0">
            and c.is_recommend=1
        </if>
        <if test="over!=null and over==1">
            and c.over=1
        </if>
        <if test="over!=null and over==2">
            and c.over is null
        </if>
        <if test="isRecommend!=null and isRecommend!=-1">
            and c.course_id in (select distinct course_id from course_details where good=1)
        </if>
        <if test="status!=null and status!=0">
            and c.status=#{status}
        </if>
        <if test="isPrice!=null">
            and c.is_price=#{isPrice}
        </if>
        <if test="wxCourse!=null">
            and c.wx_course_id is not null
        </if>
        <if test="dyCourse!=null">
            and c.dy_status=4
        </if>
        <if test="isCut!=null">
            and c.is_cut=#{isCut}
        </if>
        <if test="isExternal!=null">
            and c.is_external=#{isExternal}
        </if>
        <if test="sort==null">
            order by c.create_time desc
        </if>
        <if test="sort!=null and sort==1">
            order by goodNum desc
        </if>
        <if test="sort!=null and sort==2">
            order by weekGoodNum desc
        </if>
        <if test="sort!=null and sort==3">
            order by c.sequence asc, goodNum desc
        </if>
    </select>

    <select id="selectCourseTitle" resultType="Map">
        SELECT
        c.classify_id as classifyId,
        c.course_id as courseId,
        c.course_label as courseLabel,
        c.create_time createTime,
        c.details,
        c.img,
        c.banner_img as bannerImg,
        c.is_delete as isDelete,
        c.msg_type msgType,
        c.msg_url as msgUrl,
        c.pay_num as payNum,
        c.price,
        c.price_type as priceType,
        c.status,
        c.title,
        c.title_img as titleImg,
        c.update_time as updateTime,
        c.is_cut as isCut,
        FROM
        course c
        WHERE
        c.is_delete = 0 and c.status=1
        AND (c.is_external is null or c.is_external = 0)
        <if test='null != title'>
            and c.title LIKE #{title}
        </if>
        order by create_time desc
    </select>

    <!--/*select c.* ,
    (select ROUND(avg(score), 1) from course_score d where d.course_id=c.course_id ) as realScore,
    (select count(*) from course_collect d where d.course_id=c.course_id ) as collectCount*/

    /*减少子查询次数 采用连表*/
    /*(select count(*) from course_collect d where d.course_id=c.course_id ) as collectCount,
    COALESCE(c.score, (select ROUND(avg(score), 1) from course_score d where d.course_id = c.course_id)) as score
    from course WHERE
    c.is_delete = 0 and c.status=1*/-->
    <select id="searchCourse" resultType="com.sqx.modules.course.entity.Course">
        SELECT
        c.course_id,
        c.title,
        c.producer,
        c.is_external,
        c.external_url,
        c.title_img,
        c.course_label,
        c.details,
        c.wx_show,
        c.dy_show,
        COALESCE( c.score, cs.avg_score ) AS score,
        cc.collect_count,
        cp.platform_name
        FROM
        course c
        LEFT JOIN ( SELECT course_id, ROUND( avg( score ), 1 ) AS avg_score FROM course_score GROUP BY course_id ) cs ON
        c.course_id = cs.course_id
        LEFT JOIN ( SELECT course_id, count( * ) AS collect_count FROM course_collect GROUP BY course_id ) cc ON
        c.course_id = cc.course_id
        LEFT JOIN course_platform cp ON c.platform_id = cp.platform_id
        WHERE
        c.is_delete = 0
        AND c.STATUS = 1
        <if test='null != keyword'>
            and c.title LIKE CONCAT('%', #{keyword}, '%')
        </if>
        <if test='null != areaId'>
            and c.area_Id = #{areaId}
        </if>
        <if test='null != classifyId'>
            and c.classify_Id = #{classifyId}
        </if>
        <if test='null != platformId'>
            and c.platform_Id = #{platformId}
        </if>
        <if test='null != isPrice'>
            and c.is_Price = #{isPrice}
        </if>
        <if test='null != sortField and ("create_time" == sortField or "score" == sortField or "collect_count" == sortField)'>
            order by ${sortField}
            <if test='null != sort and (0 == sort or 1 == sort)'>
                <if test='0 == sort'>
                    asc
                </if>
                <if test='1 == sort'>
                    desc
                </if>
            </if>
        </if>
    </select>

</mapper>
